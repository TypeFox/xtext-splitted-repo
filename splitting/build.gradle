apply plugin: 'java'

sourceSets.main.java.srcDirs = ['src']

def outputFilesDir = "$buildDir/splitting"
def allHistoryFiles = file(outputFilesDir + "/all-files.txt")
def allProjects = file(outputFilesDir + "/all-projects.txt")
def unmappedPaths = file(outputFilesDir + "/unmapped-paths.txt")
def splittingFile = file("splitting.txt")
def repositories = ["core", "extras", "lib", "xtend", "eclipse", "idea", "web", "maven", "xtext-website", "xtend-website"]

task listFiles(type: Exec) {
	group 'Splitting Helper'
	description 'Creates a list of all files that have ever been in the git history.'
	outputs.file allHistoryFiles
	workingDir '..'
	commandLine 'git', 'log', '--pretty=format:', '--name-only', '--diff-filter=A'
	doFirst {
		new File(allHistoryFiles.parent).mkdirs()
		standardOutput = new FileOutputStream(allHistoryFiles)
	}
}

task findProjects(type: JavaExec) {
	group 'Splitting Helper'
	description 'Creates a list of all projects that have ever been in the git history.'
	dependsOn(sourceSets.main.runtimeClasspath, listFiles)
	inputs.file allHistoryFiles
	outputs.files allProjects, unmappedPaths
	classpath = sourceSets.main.runtimeClasspath.filter{it.exists()}
	main = "org.eclipse.xtext.splitting.FindProjects"
	args outputFilesDir
}

task validateSplitting(type: JavaExec) {
	group 'Splitting Helper'
	description 'Checks splitting.txt for validity.'
	dependsOn(sourceSets.main.runtimeClasspath, listFiles)
	inputs.files splittingFile, allHistoryFiles
	classpath = sourceSets.main.runtimeClasspath.filter{it.exists()}
	main = "org.eclipse.xtext.splitting.ValidateSplitting"
	args splittingFile, outputFilesDir
}

task generateRemovals(type: JavaExec) {
	group 'Splitting Helper'
	description 'Generates a list of files to remove for each repository.'
	dependsOn(sourceSets.main.runtimeClasspath, validateSplitting)
	inputs.files splittingFile
	outputs.files repositories.collect{ file("$outputFilesDir/removals-${it}.txt") }
	classpath = sourceSets.main.runtimeClasspath.filter{it.exists()}
	main = "org.eclipse.xtext.splitting.GenerateRemovals"
	args splittingFile, outputFilesDir
}

repositories.each { targetRepo ->
	def removalsFile = file("$outputFilesDir/removals-${targetRepo}.txt")
	task "${targetRepo}FilterBranch"(type: Exec) {
		group 'Git History Manipulation'
		description "Filters the git history for the target repository ${targetRepo}."
		dependsOn(generateRemovals)
		inputs.file removalsFile
		workingDir '..'
		commandLine 'splitting/git-filter-branch.sh', removalsFile.path, file('.').canonicalPath, targetRepo
	}
}

task(allFilterBranch) {
	group 'Git History Manipulation'
	description 'Runs the filter-branch tasks for all target repositories.'
    repositories.each { dependsOn("${it}FilterBranch") }
}

task pushToGithub(type: Exec) {
	group 'Git History Manipulation'
	description 'Force-Push all branches to TypeFox/xtext-splitted-repo on Github.'
	workingDir '..'
    commandLine 'git', 'push', '--all', '-f', 'https://xtext-repo-split@github.com/TypeFox/xtext-splitted-repo.git'
}