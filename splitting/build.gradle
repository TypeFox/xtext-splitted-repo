apply plugin: 'java'

sourceSets.main.java.srcDirs = ['src']

def outputFilesDir = "$buildDir/splitting"
def allHistoryFiles = file(outputFilesDir + "/all-files.txt")
def allProjects = file(outputFilesDir + "/all-projects.txt")
def unmappedPaths = file(outputFilesDir + "/unmapped-paths.txt")
def splittingFile = file("splitting.txt")

task listFiles(type: Exec) {
	outputs.file allHistoryFiles
	workingDir '..'
	commandLine 'git', 'log', '--pretty=format:', '--name-only', '--diff-filter=A'
	doFirst {
		new File(allHistoryFiles.parent).mkdirs()
		standardOutput = new FileOutputStream(allHistoryFiles)
	}
}

task findProjects(type: JavaExec) {
	dependsOn(sourceSets.main.runtimeClasspath, listFiles)
	inputs.file allHistoryFiles
	outputs.files allProjects, unmappedPaths
	classpath = sourceSets.main.runtimeClasspath.filter{it.exists()}
	main = "org.eclipse.xtext.splitting.FindProjects"
	args outputFilesDir
}

task validateSplitting(type: JavaExec) {
	dependsOn(sourceSets.main.runtimeClasspath, listFiles)
	inputs.files splittingFile, allHistoryFiles
	classpath = sourceSets.main.runtimeClasspath.filter{it.exists()}
	main = "org.eclipse.xtext.splitting.ValidateSplitting"
	args splittingFile, outputFilesDir
}
